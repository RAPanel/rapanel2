function addLoading() {
    var loading = document.createElement('div');
    document.body.insertBefore(loading, document.body.firstChild);
    loading.classList.add("ra-panel-loading");
    loading.innerHTML = '<svg width="32px" height="32px"><use xlink:href="svg-symbols.svg#spinner"></use></svg>';
}
function removeLoading() {
    loading.classList.remove("ra-panel-loading"), loading.parentNode.removeChild(loading)
}
function debugMode(el) {
    el.classList.toggle("ra-debug-active"), el.classList.contains("ra-debug-active") ? sessionStorage.setItem("editMode", "active") : sessionStorage.setItem("editMode", "notActive")
}
function addTooltip(el) {
    var half = el.clientWidth / 2, leftPos = el.getBoundingClientRect().left, tooltip = document.createElement("div"), data = el.dataset;
    el.hasAttribute("data-ra-tooltip") && "" !== el.getAttribute("data-ra-tooltip") && (document.body.insertBefore(tooltip, document.body.childNodes[0]), el.classList.add("hasTooltip"), tooltip.classList.add("ra-tooltip")), tooltip.innerText = data.raTooltip, tooltip.style.top = rapanel.clientHeight + "px";
    var stringLength = stringSize(tooltip, tooltip.innerText);
    tooltip.style.width = stringLength.width + 24 + "px";
    var tooltipWidth = tooltip.clientWidth;
    tooltip.style.left = leftPos + half - tooltipWidth / 2 + "px", tooltip.getBoundingClientRect().left < 0 && (tooltip.style.left = "0px"), tooltip.getBoundingClientRect().right > document.body.clientWidth && (tooltip.style.left = document.body.clientWidth - tooltipWidth + "px")
}
function removeTooltip() {
    var tooltip = document.querySelector(".ra-tooltip");
    tooltip && tooltip.parentNode.removeChild(tooltip)
}
function isInside(node, target) {
    for (; null != node; node = node.parentNode)if (node == target)return !0
}
function stringSize(obj, str) {
    var s = document.createElement("span");
    s.innerHTML = str, s.style.visibility = "hidden", s.style.whiteSpace = "nowrap", obj.appendChild(s);
    var res = {width: s.offsetWidth, height: s.offsetHeight};
    return obj.removeChild(s), res
}
function movePanel(el) {
}
function editMode(url) {
    var iframe = document.createElement("iframe");
    document.body.insertBefore(iframe, document.body.childNodes[0]), iframe.classList.add("ra-panel-edit-mode"), iframe.setAttribute("src", url), editMenu.style.display = "block", addLoading(), iframe.onload = function () {
        removeLoading()
    };
    var escape = function (event) {
        27 == event.keyCode && closeEditMode()
    };
    document.getElementsByClassName("ra-panel-edit-mode") && window.addEventListener("keydown", escape), window.addEventListener("keyup", function () {
        this.removeEventListener("keydown", escape)
    }), document.body.style.overflow = "hidden"
}
function closeEditMode() {
    var iframe = document.querySelector(".ra-panel-edit-mode");
    iframe.parentNode.removeChild(iframe), editMenu.style.display = "none", document.body.style.overflow = "auto"
}
function setCookie(name, value, options) {
    options = options || {};
    var expires = options.expires;
    if ("number" == typeof expires && expires) {
        var d = new Date;
        d.setTime(d.getTime() + 1e3 * expires), expires = options.expires = d
    }
    expires && expires.toUTCString && (options.expires = expires.toUTCString()), value = encodeURIComponent(value);
    var updatedCookie = name + "=" + value;
    for (var propName in options) {
        updatedCookie += "; " + propName;
        var propValue = options[propName];
        propValue !== !0 && (updatedCookie += "=" + propValue)
    }
    document.cookie = updatedCookie
}
function getCookie(name) {
    var matches = document.cookie.match(new RegExp("(?:^|; )" + name.replace(/([\.$?*|{}\(\)\[\]\\\/\+^])/g, "\\$1") + "=([^;]*)"));
    return matches ? decodeURIComponent(matches[1]) : void 0
}
function offsetMenu() {
    var menuWidth = menu.clientWidth, offset = menu.style.marginLeft = parseInt(getCookie("position")) - menuWidth / 2 + "px";
    parseInt(offset) < 0 ? menu.style.marginLeft = "0px" : parseInt(offset) + menuWidth > document.body.clientWidth && (menu.style.marginLeft = document.body.clientWidth - menuWidth + "px")
}
var rapanel = document.getElementById("ra-panel"), loading = document.createElement("div"), spinner = document.createElement("svg"), labelPanel = document.getElementById("ra-panel-label"), menu = document.getElementById("ra-panel-actions"), timerId, menuPosition, editMenu = document.getElementById("ra-panel-edit-menu"), lock = document.getElementById("ra-panel-lock"), icoMenu = document.getElementById("ra-panel-menu"), moveEnable = 0;
lock.addEventListener("click", function () {
    rapanel.classList.toggle("ra-panel-fixed"), this.classList.toggle("ra-unlock"), labelPanel.classList.toggle("ra-panel-label-fixed"), rapanel.classList.contains("ra-panel-fixed") ? sessionStorage.setItem("fixed", "fixed") : sessionStorage.setItem("fixed", "unfixed")
}), document.getElementById("ra-panel-reset").addEventListener("click", function () {
    var el = this;
    addLoading(), el.classList.add("ra-loading"), setTimeout(function () {
        removeLoading(), el.classList.remove("ra-loading")
    }, 2e3)
}), document.getElementById("ra-panel-debug").addEventListener("click", function () {
    debugMode(this)
});
for (var menuItems = document.querySelectorAll("#ra-panel-actions a"), i = 0; i < menuItems.length; i++)menuItems[i].addEventListener("mouseover", function (event) {
    isInside(event.relatedTarget, this) || (addTooltip(this), menu.classList.contains("ra-show-sub-menu") && "ra-panel-menu" == event.target.id && (this.classList.remove("hasTooltip"), removeTooltip()))
});
for (var j = 0; j < menuItems.length; j++)menuItems[j].addEventListener("mouseout", function (event) {
    isInside(event.relatedTarget, this) || (this.classList.remove("hasTooltip"), removeTooltip())
});
document.getElementById("ra-panel-label").addEventListener("click", function () {
    1 != moveEnable && rapanel.classList.remove("ra-panel-offset")
}), rapanel.addEventListener("mouseout", function (event) {
    document.querySelector(".ra-panel-loading") || isInside(event.relatedTarget, this) || (timerId = setTimeout(function () {
        "ra-unlock" !== document.getElementById("ra-panel-lock").getAttribute("class") && (rapanel.classList.add("ra-panel-offset"), document.getElementById("ra-panel-label").classList.add("ra-panel-label-fixed")), menu.classList.remove("ra-show-sub-menu")
    }, 500))
}), rapanel.addEventListener("mouseover", function () {
    clearTimeout(timerId)
}), window.addEventListener("mouseup", function () {
    clearTimeout(timerId)
}), labelPanel.addEventListener("mousedown", function (event) {
    var target = event.target, el = this;
    timerId = setTimeout(function () {
        moveEnable = 1, el.classList.add("ra-panel-label-drag");
        var move = function (event) {
            target && (menuPosition = el.style.left = event.clientX + "px", parseInt(menuPosition) < el.clientWidth / 2 && (el.style.left = el.clientWidth / 2 + "px"), parseInt(menuPosition) > document.body.clientWidth - el.clientWidth / 2 && (el.style.left = document.body.clientWidth - el.clientWidth / 2 + "px"))
        };
        window.addEventListener("mousemove", move), window.addEventListener("mouseup", function () {
            target.classList.contains("ra-panel-label-drag") && target.classList.remove("ra-panel-label-drag"), setTimeout(function () {
                moveEnable = 0
            }, 1), setCookie("position", menuPosition), offsetMenu(), this.removeEventListener("mousemove", move)
        })
    }, 300)
}), window.onload = function () {
    parseInt(getCookie("position")) > document.body.clientWidth ? (labelPanel.style.left = document.body.clientWidth / 2 + "px", setCookie("position", labelPanel.style.left = document.body.clientWidth / 2 + "px")) : labelPanel.style.left = getCookie("position"), offsetMenu(), "unfixed" == sessionStorage.getItem("fixed") && (lock.classList.add("ra-unlock"), rapanel.classList.remove("ra-panel-fixed"), rapanel.classList.remove("ra-panel-offset"), labelPanel.classList.remove("ra-panel-label-fixed")), "active" == sessionStorage.getItem("editMode") && document.getElementById("ra-panel-debug").classList.add("ra-debug-active")
}, document.getElementById("ra-panel-edit").addEventListener("click", function (e) {
    editMode(document.getElementById("ra-panel-edit").href), e.preventDefault()
}), document.querySelector("#ra-panel-edit-menu .removeEditMode").addEventListener("click", closeEditMode), icoMenu.addEventListener("click", function (e) {
    menu.classList.toggle("ra-show-sub-menu"), menu.classList.contains("ra-show-sub-menu") && (this.classList.remove("hasTooltip"), removeTooltip()), e.preventDefault()
});